{"version":3,"sources":["logo.svg","reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookItem.js","components/BookList.js","components/NewBookForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","console","log","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookItem","onClick","BookList","bookList","map","key","NewBookForm","useState","setTitle","setAuthor","handleChange","e","target","name","onSubmit","preventDefault","onChange","aria-label","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,8ICE9BC,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CAAEG,MAAOF,EAAOG,KAAKD,MAAOE,OAAQJ,EAAOG,KAAKC,OAAQC,GAAIC,SAChF,IAAK,cACH,OAAO,YAAIP,EAAMQ,QAAO,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,OACrD,QACE,OAAON,ICPAS,EAAcC,0BAkBZC,EAhBa,SAAAC,GAAU,IAAD,EACTC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SAEvC,OADAC,QAAQC,IAAIJ,GACLA,EAAYK,KAAKC,MAAMN,GAAa,MAJV,mBAC5BO,EAD4B,KACrBC,EADqB,KAanC,OAJAC,qBAAU,WACRR,aAAaS,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAEG,kBAACZ,EAAYiB,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aAAaV,EAAMgB,WCFnDC,EAZA,WAAO,IACZR,EAAUS,qBAAWrB,GAArBY,MACR,OACE,yBAAKU,UAAU,UACb,iDACA,uCACW,0BAAMA,UAAU,mBAAmBV,EAAMW,OAAzC,UADX,cCWSC,EAhBE,SAAC,GAAc,IAAZ7B,EAAW,EAAXA,KACVkB,EAAaQ,qBAAWrB,GAAxBa,SAOR,OACE,wBAAIS,UAAU,YAAYG,QANR,WAElBZ,EAAS,CAAEpB,KAAM,cAAeI,GAAIF,EAAKE,OAKvC,yBAAKyB,UAAU,SAAS3B,EAAKD,OAC7B,yBAAK4B,UAAU,UAAU3B,EAAKC,UCDrB8B,EATE,WAAO,IACdd,EAAUS,qBAAWrB,GAArBY,MACFe,EAAWf,EAAMgB,KAAI,SAAAjC,GACzB,OAAO,kBAAC,EAAD,CAAUA,KAAMA,EAAMkC,IAAKlC,EAAKE,QAGzC,OAAOe,EAAMW,OAAS,wBAAID,UAAU,aAAaK,GAAiB,mDC8CrDG,EArDK,WAAM,IAEhBjB,EAAaQ,qBAAWrB,GAAxBa,SAFgB,EAGEkB,mBAAS,CAAC,KAHZ,mBAGjBrC,EAHiB,KAGVsC,EAHU,OAIID,mBAAS,CAAC,KAJd,mBAIjBnC,EAJiB,KAITqC,EAJS,KAOlBC,EAAe,SAAAC,GACD,UAAlBA,EAAEC,OAAOC,KAAmBL,EAASG,EAAEC,OAAOlB,OAASe,EAAUE,EAAEC,OAAOlB,OAC1EV,QAAQC,IAAIf,EAAOE,IAiBrB,OACE,0BAAM0B,UAAU,OAAOgB,SAfJ,SAAAH,GACnBA,EAAEI,iBACF1B,EAAS,CACPpB,KAAM,WACNE,KAAM,CACJD,QACAE,YAIJoC,EAAS,IACTC,EAAU,MAKR,2BACEX,UAAU,aACVkB,SAAUN,EACVzC,KAAK,OACL4C,KAAK,QACLI,aAAW,YACXvB,MAAOxB,EACPgD,YAAY,oBAEd,2BACEpB,UAAU,aACVkB,SAAUN,EACVzC,KAAK,OACL4C,KAAK,SACLI,aAAW,cACXvB,MAAOtB,EACP8C,YAAY,sBAEd,4BAAQpB,UAAU,cAAc7B,KAAK,UAArC,cC7BSkD,MAZf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4050bf29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import uuid from 'uuid/v1';\r\n\r\nexport const bookReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_BOOK':\r\n      return [...state, { title: action.book.title, author: action.book.author, id: uuid() }];\r\n    case 'REMOVE_BOOK':\r\n      return [...state.filter(book => book.id !== action.id)];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { bookReducer } from '../reducers/bookReducer';\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = props => {\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem('books');\r\n    console.log(localData);\r\n    return localData ? JSON.parse(localData) : [];\r\n  });\r\n\r\n  // user enter new book will update books state, and then code in useEffect() will run\r\n  // add book in local storage in useEffect\r\n  useEffect(() => {\r\n    localStorage.setItem('books', JSON.stringify(books));\r\n  }, [books]);\r\n\r\n  return <BookContext.Provider value={{ books, dispatch }}>{props.children}</BookContext.Provider>;\r\n};\r\n\r\nexport default BookContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Your Reading List</h1>\r\n      <p>\r\n        you have <span className=\"heighlight-text\">{books.length} books</span> to read\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst BookItem = ({ book }) => {\r\n  const { dispatch } = useContext(BookContext);\r\n\r\n  const handleClick = () => {\r\n    // removeBook(book.id);\r\n    dispatch({ type: 'REMOVE_BOOK', id: book.id });\r\n  };\r\n\r\n  return (\r\n    <li className=\"book-item\" onClick={handleClick}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default BookItem;\r\n","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookItem from './BookItem';\r\n\r\nconst BookList = () => {\r\n  const { books } = useContext(BookContext);\r\n  const bookList = books.map(book => {\r\n    return <BookItem book={book} key={book.id} />;\r\n  });\r\n\r\n  return books.length ? <ul className=\"book-list\">{bookList}</ul> : <p>No books to read :)</p>;\r\n};\r\n\r\nexport default BookList;\r\n","import React, { useState, useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst NewBookForm = () => {\r\n  // const { addBook } = useContext(BookContext);\r\n  const { dispatch } = useContext(BookContext);\r\n  const [title, setTitle] = useState(['']);\r\n  const [author, setAuthor] = useState(['']);\r\n  //   const [title, author, setDetails] = useState(['', '']);\r\n\r\n  const handleChange = e => {\r\n    e.target.name === 'title' ? setTitle(e.target.value) : setAuthor(e.target.value);\r\n    console.log(title, author);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: 'ADD_BOOK',\r\n      book: {\r\n        title,\r\n        author\r\n      }\r\n    });\r\n    // addBook(title, author);\r\n    setTitle('');\r\n    setAuthor('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"form-input\"\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n        name=\"title\"\r\n        aria-label=\"book name\"\r\n        value={title}\r\n        placeholder=\"enter book name\"\r\n      />\r\n      <input\r\n        className=\"form-input\"\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n        name=\"author\"\r\n        aria-label=\"author name\"\r\n        value={author}\r\n        placeholder=\"enter author name\"\r\n      />\r\n      <button className=\"primary-btn\" type=\"submit\">\r\n        Add book\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewBookForm;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport BookContextProvider from './contexts/BookContext';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/NewBookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}